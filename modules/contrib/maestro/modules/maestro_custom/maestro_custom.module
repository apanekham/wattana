<?php

/**
 * @file
 * You need this if you want to simply use MaestroEngine in code calls as we do.
 */

use Drupal\webform\Entity\WebformSubmission;
use Drupal\maestro\Utility\TaskHandler;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\maestro\Engine\MaestroEngine;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\node\Entity\Node;


/**
 * Implements hook_maestro_batch_handlers().
 *
 * Array of function names and help text that will be displayed
 * in the edit task form under the handler field.
 */
function maestro_custom_maestro_batch_handlers() {
  return [
	  'custom_spv_content_user_fetch' => t('Retrieve the entity reference and store it as a process variable'),
	  'check_is_user' => t('Check if anonymous to create user account'),  
  ];
  //return $handlers;
}

/**
 * Implements hook_maestro_interactive_handlers().
 *
 * Array of function names and help text that will be displayed
 * in the edit task form under the handler field.
 */
function maestro_custom_maestro_interactive_handlers() {
  return [
    'custom_spv_content_user_fetch' => t('Simple retrieve the entity reference and store it as a process variable.'),
    
 ];
}

/**
 * This is a custom user retrieval function to be used to do a batch function.
 *
 * @param int $processID
 *   The Maestro process ID.
 * @param int $queueID
 *   The Maestro queue ID.
 */
function custom_spv_content_user_fetch($uniqueIdentifier, $field, $queueID, $processID) {
  $returnValue = 'not return array';

  $entityID = MaestroEngine::getEntityIdentiferByUniqueID($processID, $uniqueIdentifier);
  //$returnValue = $entityID;
  $node = \Drupal\node\Entity\Node::load($entityID);
  //$returnValue = $node->$field->entity->name->value;
  if ($node) {
    // We have a match.  let's do our work now on this content type.
    $returnValue = $node->$field->entity->name->value;
    // TODO: getValue also get taxonomy?  What about nested entity refs?
    //$returnValue = $field_ref->entity;  //getValue();
    //if (is_array($returnValue)) {
      // Bail out once we know we have a value.
      //$returnValue = \Drupal::entityTypeManager()->getStorage('user')->load(current($returnValue)['target_id']);
    //MaestroEngine::setProcessLabel($processID, $account->getAccountName() . '  submitted Request');
    //}
  }

  return $returnValue;
}
function check_is_user($processID, $queueID) {

	//$message = 'You are not log in. Please register.';
	//MaestroEngine::setProcessVariable('message', $message, $processID);
       // $logged_in = 0
  $current= \Drupal::currentUser();
  if (!$current->id()) {
	  $message = 'New user has been created';
	  MaestroEngine::setProcessVariable('message', $message, $processID);
	  return TRUE;
	  //
  }
  else {
          return TRUE;
  }
}
